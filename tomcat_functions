check_all_tomcats() {
        local startdir='/'
        if [ -z  "$1" ]; then  
            startdir="$1"
        fi
        check_tomcat $(find_catalina_bases $1)
}

find_running_tomcat_pids() {
	ps aux | grep 'org.apache.catalina.startup.Bootstrap start$' | awk '{print $2}'
}

find_catalina_bases(){
	local startdir='/'
	if [ ! -z "$1" ]; then
		startdir="$1"
	fi 

	find "$startdir" -wholename '*conf/server.xml' 2>/dev/null -exec bash -c 'echo $(dirname $(dirname {}))' \;
}

detect_java_version() {
    [[ -z "$1" ]] && return
    local pid="$1"
    echo "looking up java version for $pid..." >&2
    local exe=$(readlink -e /proc/$pid/exe)
    if [[ ! -z "$exe" ]]; then
        local java_home=$(dirname $(dirname $exe))
        echo "java home is $java_home" >&2
        basename $java_home
    fi
}

check_tomcat() {
	# print header if row we have any arguments
	[ -z "$1" ] || printf '%-5s %7s %7s %14s %14s %4s %10s %8s %8s %s\n' "STATE" "PID" "PORT" "VSZ" "RSS" "CPU" "START" "LOGSZ" "JAVA_VERSION" "CATALINA_BASE"
	for catalina_base in "$@"
	do
		# strip trailing slashes
		catalina_base=$(echo "$catalina_base" | sed 's/\/\+$//g')

		vsz="?"
		rss="?"
		pctcpu="?"
		tcpid="?"
		starttime="?"
		logsz="?"
                listen_port="?"
                java_version="?"
		# listen_addrs will include the SHUTDOWN port and any listening ports;
		# shutdown is usually listening only to 127.0.0.1
		# local listen_addrs=$(netstat -lpn 2>/dev/null | grep "$pid/" | awk '{print $4}')

		# note that we use the PID rather than the PORT to determine if an instance is
		# running; this is because another instance might be configured against the same
		# port, so if we used something like lsof against the port number, we might
		# be getting different program using that port
		if [ -r "$catalina_base/conf/server.xml" ]; then
                        # old versions of xmllint doesn't support --xpath argument, so use the shell command with "cat";
                        # if you are sure you will have xmllib2 > 2.7.7 available, you can use it here instead 
                        # note that using "cat" doesn't behave the same way xpath does, so we have to filter out non-AJP
                        # ports using sed
                        listen_port=$(xmllint --shell "$catalina_base/conf/server.xml" <<<'cat //Connector' | grep http | sed 's/.*port\s*=\s*.\([0-9]\+\)..*/\1/' || exit 1)

                        if [ "$?" -ne "0" ]; then
                            echo "$listen_port" >&2
                            echo "Error processing XML!" >&2
                            exit 1
                        elif [[ ! $listen_port =~ ^[[:digit:]] ]]; then
                            echo "Failed to identify listen port for $catalina_base: $listen_port " >&2
                            listen_port="?"
                        fi

			logsz=$(du -h "$catalina_base/logs" | tail -1 | cut -f1 || exit 1)
                        if [ "$?" -ne "0" ]; then
                            logsz="?"
                            echo "Failed to identify log size of $catalina_base" >&2
                        elif [[ ! $logsz =~ ^[[:digit:]] ]]; then
                            echo "Failed to identify log size of $catalina_base: $logsz" >&2
                            logsz="?"
                        fi 
                        
			info=$(ps aux | grep "$catalina_base" | grep -v grep)
			if [[ ! -z "$info" ]]; then
                            tcpid=$(echo $info | cut -f2 -d' ') 

                            vsz=$(grep "VmSize" /proc/$tcpid/status | awk '{print $2$3}')
                            rss=$(grep "VmRSS" /proc/$tcpid/status | awk '{print $2$3}')
                                        
                            # trim spaces from starttime because printf will shift them a column over
                            starttime=$(ps -p $tcpid -wo start | tail -1 | tr -d '[:space:]')
                            pctcpu=$(ps -p $tcpid -wo %cpu | tail -1)

                            java_version=$(detect_java_version $tcpid)
			fi

			[[ -z "$tcpid" ]] && tcpid="?"
			[[ -z "$java_version" ]] && java_version="?"
		else
			echo "pid $tcpid: Cannot read $catalina_base/conf/server.xml" >&2
			# shutdown_port='?'
			tcpid='?'
		fi

		if [[ "$tcpid" -eq "$tcpid" ]] 2>/dev/null; then
			status=UP 
		else
			status=DOWN
		fi
                
		printf '%-5s %7s %7s %14s %14s %4s %10s %8s %8s %s\n' "$status" "$tcpid" "$listen_port" "$vsz" "$rss" "$pctcpu" "$starttime" "$logsz" "$java_version" "$catalina_base" 
	done
}


