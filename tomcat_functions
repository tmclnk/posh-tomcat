check_all_tomcats() {
        local startdir='/'
        if [ -z  "$1" ]; then  
            startdir="$1"
        fi
        check_tomcat $(find_catalina_bases $1)
}

find_running_tomcat_pids() {
	ps aux | grep 'org.apache.catalina.startup.Bootstrap start$' | awk '{print $2}'
}

find_catalina_bases(){
	local startdir='/'
	if [ ! -z "$1" ]; then
		startdir="$1"
	fi 

	find "$startdir" -wholename '*conf/server.xml' 2>/dev/null -exec bash -c 'echo $(dirname $(dirname {}))' \;
}

check_tomcat() {
	# print header if row we have any arguments
	[ -z "$1" ] || printf '%-5s %6s %6s %8s %8s %4s %8s %8s %s\n' "STATE" "PID" "PORT" "VSZ" "RSS" "CPU" "START" "LOGSZ" "CATALINA_BASE"
	for catalina_base in "$@"
	do
		# strip trailing slashes
		catalina_base=$(echo "$catalina_base" | sed 's/\/\+$//g')

		vsz="?"
		rss="?"
		pctcpu="?"
		tcpid="?"
		starttime="?"
		logsz="?"
		# listen_addrs will include the SHUTDOWN port and any listening ports;
		# shutdown is usually listening only to 127.0.0.1
		# local listen_addrs=$(netstat -lpn 2>/dev/null | grep "$pid/" | awk '{print $4}')

		# note that we use the PID rather than the PORT to determine if an instance is
		# running; this is because another instance might be configured against the same
		# port, so if we used something like lsof against the port number, we might
		# be getting different program using that port
		if [ -r "$catalina_base/conf/server.xml" ]; then
			shutdown_port=$(xmllint --xpath 'string(/Server/@port)' "$catalina_base/conf/server.xml" || echo "xpath error" >&2 && exit 1)
			listen_port=$(xmllint --xpath 'string(//Connector/@port)' "$catalina_base/conf/server.xml" || echo "xpath error" >&2 && exit 1)
                        if [ "$?" -ne "0" ]; then
                            echo "Error processing XML!" >&2
                            exit 1
                        fi
			logsz=$(du -h "$catalina_base/logs" | tail -1 | cut -f1)
			info=$(ps aux | grep "$catalina_base" | grep -v grep)
			if [[ ! -z "$info" ]]; then
				tcpid=$(echo $info | cut -f2 -d' ') 
				if command -v pmap >/dev/null 2>&1; then 
					vsz=$(pmap -x $tcpid | tail -1 | awk '{print $3}')
					rss=$(pmap -x $tcpid | tail -1 | awk '{print $4}')
                                        
                                        if command -v numfmt >/dev/null 2>&1; then 
                                            vsz=$(numfmt --to=iec-i --suffix=B  --from-unit=1000 $vsz)
                                            rss=$(numfmt --to=iec-i --suffix=B  --from-unit=1000 $rss)
                                        fi
				fi
				
				# trim spaces from starttime because printf will shift them a column
				# over
				starttime=$(ps -p $tcpid -wo start | tail -1 | tr -d '[:space:]')
				pctcpu=$(ps -p $tcpid -wo %cpu | tail -1)
			fi

			[[ -z "$tcpid" ]] && tcpid="?"
		else
			echo "pid $tcpid: Cannot read $catalina_base/conf/server.xml" >&2
			shutdown_port='?'
			listen_port='?'
			tcpid='?'
		fi

		if [[ "$tcpid" -eq "$tcpid" ]] 2>/dev/null; then
			status=UP 
		else
			status=DOWN
		fi

		printf '%-5s %6s %6s %8s %8s %4s %8s %8s %s\n' "$status" "$tcpid" "$listen_port" "$vsz" "$rss" "$pctcpu" "$starttime" "$logsz" "$catalina_base"
	done
}


